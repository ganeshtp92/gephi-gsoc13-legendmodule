/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gephi.legend.manager;

import java.awt.*;
import java.beans.PropertyEditorManager;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.gephi.data.attributes.api.AttributeModel;
import org.gephi.graph.api.Graph;
import org.gephi.legend.api.CustomLegendItemBuilder;
import org.gephi.legend.builders.*;
import org.gephi.legend.items.*;
import org.gephi.legend.items.propertyeditors.DescriptionItemElementPropertyEditor;
import org.gephi.preview.api.*;
import org.gephi.preview.spi.PreviewUI;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author edubecks
 */
@ServiceProvider(service = PreviewUI.class, position = 404)
public class LegendManagerUI extends javax.swing.JPanel implements PreviewUI {

    private final LegendController legendController;

    /**
     * Creates new form LegendManagerUI
     */
    public LegendManagerUI() {
        legendController = LegendController.getInstance();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        addLegendButton = new javax.swing.JButton();
        removeLegendButton = new javax.swing.JButton();
        editLegendButton = new javax.swing.JButton();
        moveUp = new javax.swing.JButton();
        moveDown = new javax.swing.JButton();
        legendManagerPanel = new javax.swing.JPanel();
        legendPropertiesPanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        addLegendButton.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.addLegendButton.text")); // NOI18N
        addLegendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLegendButtonActionPerformed(evt);
            }
        });
        add(addLegendButton, new java.awt.GridBagConstraints());

        removeLegendButton.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.removeLegendButton.text")); // NOI18N
        removeLegendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLegendButtonActionPerformed(evt);
            }
        });
        add(removeLegendButton, new java.awt.GridBagConstraints());

        editLegendButton.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.editLegendButton.text")); // NOI18N
        editLegendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLegendButtonActionPerformed(evt);
            }
        });
        add(editLegendButton, new java.awt.GridBagConstraints());

        moveUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gephi/legend/graphics/moveup_8.png"))); // NOI18N
        moveUp.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.moveUp.text")); // NOI18N
        moveUp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        moveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpActionPerformed(evt);
            }
        });
        add(moveUp, new java.awt.GridBagConstraints());

        moveDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gephi/legend/graphics/movedown_8.png"))); // NOI18N
        moveDown.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.moveDown.text")); // NOI18N
        moveDown.setMargin(new java.awt.Insets(0, 0, 0, 0));
        moveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownActionPerformed(evt);
            }
        });
        add(moveDown, new java.awt.GridBagConstraints());

        legendManagerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.legendManagerPanel.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP)); // NOI18N
        legendManagerPanel.setLayout(new java.awt.GridBagLayout());

        legendPropertiesPanel.setMinimumSize(new java.awt.Dimension(152, 57));
        legendPropertiesPanel.setPreferredSize(new java.awt.Dimension(152, 57));
        legendPropertiesPanel.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        legendManagerPanel.add(legendPropertiesPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(legendManagerPanel, gridBagConstraints);
        legendManagerPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.legendManagerPanel.AccessibleContext.accessibleName")); // NOI18N
        legendManagerPanel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.legendManagerPanel.AccessibleContext.accessibleDescription")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    public void refreshActiveLegendsComboBox() {
        /*
         LegendManager legendManager = legendController.getLegendManager();
         Item activeLegendItem = legendManager.getActiveLegendItem();
         activeLegendsComboBox.removeAllItems();
         if (activeLegendItem != null) {
         ArrayList<Item> legendItems = legendManager.getLegendItems();
         for (Item item : legendItems) {
         activeLegendsComboBox.addItem(item);
         }

         activeLegendsComboBox.setSelectedItem(activeLegendItem);
         } else {
         activeLegendsComboBox.setSelectedIndex(-1);
         }
         */
    }

    private void addLegendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLegendButtonActionPerformed
        Collection<? extends LegendItemBuilder> availableBuilders = legendController.getAvailablebuilders();
        Object[] availableBuildersArray = availableBuilders.toArray();
        LegendItemBuilder chosenLegend = (LegendItemBuilder) JOptionPane.showInputDialog(this, "Choose the type of Legend:", "Add Legend", JOptionPane.PLAIN_MESSAGE, null, availableBuildersArray, availableBuildersArray[0]);

        if (chosenLegend != null) {
            ArrayList<CustomLegendItemBuilder> chosenLegendCustomBuilders = chosenLegend.getAvailableBuilders();
            CustomLegendItemBuilder chosenLegendCustomBuilder = chosenLegendCustomBuilders.get(0); //for Default
            //if there is more than one custom builder, allow the user to choose between them.
            if (chosenLegendCustomBuilders.size() > 1) {
                Object[] chosenLegendCustomBuildersArray = chosenLegendCustomBuilders.toArray();
                chosenLegendCustomBuilder = (CustomLegendItemBuilder) JOptionPane.showInputDialog(this, "Choose the custom builder:", "Custom Builder", JOptionPane.PLAIN_MESSAGE, null, chosenLegendCustomBuildersArray, chosenLegendCustomBuildersArray[0]);
            }

            if (chosenLegendCustomBuilder != null) {
                Graph graph = null;
                AttributeModel attributeModel = null;

                LegendManager legendManager = legendController.getLegendManager();
                Integer newItemIndex = legendManager.getCurrentIndex();

                if (chosenLegendCustomBuilder.isAvailableToBuild()) {

                    Item item = chosenLegend.createCustomItem(newItemIndex, graph, attributeModel, chosenLegendCustomBuilder);

                    // adding item to legend manager
                    legendController.addItemToLegendManager(item);

                    ArrayList<Item> items = legendManager.getLegendItems();
                    System.out.println("\n-- from add: ");
                    for (int i = 0; i < legendManager.getNumberOfActiveItems(); i++) {
                        System.out.print(items.get(i) + " ");
                    }

                    refreshLayers();
                } else {
                    JOptionPane.showMessageDialog(this, chosenLegendCustomBuilder.stepsNeededToBuild(), NbBundle.getMessage(LegendManager.class, "LegendItem.stepsNeededToBuildItem"), JOptionPane.INFORMATION_MESSAGE, null);
                }
            }
        }

        //Description: Default
        //Groups: Default, Number of nodes in a partition
        //Image: Default
        //Table: Default, Partition Interaction Table, Top 10 nodes with greatest degree
        //Text: Default
    }//GEN-LAST:event_addLegendButtonActionPerformed

    private JTable getLegendLayerModel() {
        /* Reason to have a JTable:
         * The columns can be added as and when there is a requirement. This is a step towards extendibility.
         * Right now, we have 1 column, for the name. Another column can be included for visibility.
         * When an element is clicked, we can easily figure out what was clicked by finding out the row and column, instead of having callbacks registered for each element.
         */
        
        LegendManager legendManager = legendController.getLegendManager();
        ArrayList<Item> items = legendManager.getLegendItems();
        
        int numberOfActiveItems = legendManager.getNumberOfActiveItems();
        String[] columnNames = {"Legends"};
        Object[][] rowData = new Object[numberOfActiveItems][];
        for (int i = 0; i < legendManager.getNumberOfActiveItems(); i++) {
            rowData[numberOfActiveItems - i - 1] = new Object[columnNames.length];
            rowData[numberOfActiveItems - i - 1][0] = "Legend " + items.get(i);
        }
        DefaultTableModel legendLayerModel = new DefaultTableModel(rowData, columnNames);
        JTable layerOrderTemp = new JTable(legendLayerModel);

        layerOrderTemp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                int row = layerOrder.rowAtPoint(e.getPoint()); //returns -1 if clicked outside the table. Hence this condition has to checked in the code further.
                int col = layerOrder.columnAtPoint(e.getPoint());

                LegendManager legendManager = legendController.getLegendManager();
                ArrayList<Item> items = legendManager.getLegendItems();
                if (row >= 0) {
                    Item activeItem = items.get(legendManager.getNumberOfActiveItems() - 1 - row);
                    Integer itemIndex = (Integer) activeItem.getData(LegendItem.ITEM_INDEX);
                    legendManager.setActiveLegend(legendManager.getIndexFromItemIndex(itemIndex));
                    System.out.println("\nactiveLegend: " + legendManager.getActiveLegend());
                }
            }
        });
        return layerOrderTemp;
    }

    private void refreshLayers() {
        PreviewController previewController = Lookup.getDefault().lookup(PreviewController.class);
        PreviewModel previewModel = previewController.getModel();

        // check if previewModel exists
        if (previewModel == null) {
            return;
        }

        legendPropertiesPanel.removeAll();

        LegendManager legendManager = legendController.getLegendManager();
        ArrayList<Item> items = legendManager.getLegendItems();

        System.out.println("\nfrom refreshlayers: " + legendManager.getNumberOfActiveItems());
        for (Item item : items) {
            System.out.print(item + " -- ");
        }
        System.out.println();

        layerOrder = getLegendLayerModel();
        legendPropertiesPanel.add(layerOrder, BorderLayout.CENTER);

        legendPropertiesPanel.repaint();
        legendPropertiesPanel.updateUI();
    }

    private void removeLegendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLegendButtonActionPerformed
        LegendManager legendManager = legendController.getLegendManager();
        int indexOfActiveLegend = legendManager.getActiveLegend();
        if (indexOfActiveLegend != -1) //if index is -1, it means that that there are no active items
        {
            legendManager.removeItem(indexOfActiveLegend);

            ArrayList<Item> items = legendManager.getLegendItems();
            System.out.println("\n-- from remove: ");
            for (int i = 0; i < legendManager.getNumberOfActiveItems(); i++) {
                System.out.print(items.get(i) + " ");
            }
            
            refreshLayers();
            if (legendManager.getItems().isEmpty()) {
                legendManager.setActiveLegend(-1);
            }
        }
    }//GEN-LAST:event_removeLegendButtonActionPerformed

    private void editLegendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLegendButtonActionPerformed
    }//GEN-LAST:event_editLegendButtonActionPerformed

    private void moveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpActionPerformed
        LegendManager legendManager = legendController.getLegendManager();
        int activeLegendIndex = legendManager.getActiveLegend();

        legendManager.swapItems(activeLegendIndex, legendManager.getNextActiveLegend());
        ArrayList<Item> items = legendManager.getLegendItems();
        System.out.println("\n-- from moveUpAction: ");
            for (int i = 0; i < legendManager.getNumberOfActiveItems(); i++) {
                System.out.print(items.get(i) + " ");
            }
        refreshLayers();
        //select the row that corresponds to activelegend
    }//GEN-LAST:event_moveUpActionPerformed

    private void moveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownActionPerformed
        LegendManager legendManager = legendController.getLegendManager();
        int activeLegendIndex = legendManager.getActiveLegend();
        ArrayList<Item> items = legendManager.getLegendItems();
            System.out.println("\n-- from moveDownAction: ");
            for (int i = 0; i < legendManager.getNumberOfActiveItems(); i++) {
                System.out.print(items.get(i) + " ");
            }
            
            legendManager.swapItems(activeLegendIndex, legendManager.getPreviousActiveLegend());
            refreshLayers();
            //select the row that corresponds to activelegend
    }//GEN-LAST:event_moveDownActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLegendButton;
    private javax.swing.JButton editLegendButton;
    private javax.swing.JPanel legendManagerPanel;
    private javax.swing.JPanel legendPropertiesPanel;
    private javax.swing.JButton moveDown;
    private javax.swing.JButton moveUp;
    private javax.swing.JButton removeLegendButton;
    // End of variables declaration//GEN-END:variables
    private JTable layerOrder;

    @Override
    public void setup(PreviewModel previewModel) {
    }

    @Override
    public JPanel getPanel() {
        refreshActiveLegendsComboBox();
        return this;
    }

    @Override
    public void unsetup() {
    }

    @Override
    public Icon getIcon() {
        return new ImageIcon();
    }

    @Override
    public String getPanelTitle() {
        return NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.title");
    }

    public class ComboboxToolTipRenderer extends DefaultListCellRenderer {

        private ArrayList<String> tooltips;

        @Override
        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {

            JComponent comp = (JComponent) super.getListCellRendererComponent(list,
                    value, index, isSelected, cellHasFocus);

            if (-1 < index && null != value && null != tooltips) {
                list.setToolTipText(tooltips.get(index));
            }
            return comp;
        }

        public void setTooltips(ArrayList<String> tooltips) {
            this.tooltips = tooltips;
        }
    }
    private ComboboxToolTipRenderer tooltipRenderer;
}
