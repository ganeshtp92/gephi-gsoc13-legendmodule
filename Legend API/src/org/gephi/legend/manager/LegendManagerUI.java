/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gephi.legend.manager;

import java.awt.*;
import java.beans.PropertyEditorManager;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import org.gephi.data.attributes.api.AttributeModel;
import org.gephi.graph.api.Graph;
import org.gephi.legend.api.CustomLegendItemBuilder;
import org.gephi.legend.builders.*;
import org.gephi.legend.items.*;
import org.gephi.legend.items.propertyeditors.DescriptionItemElementPropertyEditor;
import org.gephi.preview.api.*;
import org.gephi.preview.spi.PreviewUI;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author edubecks
 */
@ServiceProvider(service = PreviewUI.class, position = 404)
public class LegendManagerUI extends javax.swing.JPanel implements PreviewUI {

    private final LegendController legendController;

    /**
     * Creates new form LegendManagerUI
     */
    public LegendManagerUI() {
        legendController = LegendController.getInstance();
        initComponents();
        
        //tooltipRenderer = new ComboboxToolTipRenderer();
        //builderTypeComboBox.setRenderer(tooltipRenderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        addLegendButton = new javax.swing.JButton();
        removeLegendButton = new javax.swing.JButton();
        editLegendButton = new javax.swing.JButton();
        legendManagerPanel = new javax.swing.JPanel();
        legendPropertiesPanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        addLegendButton.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.addLegendButton.text")); // NOI18N
        addLegendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLegendButtonActionPerformed(evt);
            }
        });
        add(addLegendButton, new java.awt.GridBagConstraints());

        removeLegendButton.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.removeLegendButton.text")); // NOI18N
        removeLegendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLegendButtonActionPerformed(evt);
            }
        });
        add(removeLegendButton, new java.awt.GridBagConstraints());

        editLegendButton.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.editLegendButton.text")); // NOI18N
        editLegendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLegendButtonActionPerformed(evt);
            }
        });
        add(editLegendButton, new java.awt.GridBagConstraints());

        legendManagerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.legendManagerPanel.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP)); // NOI18N
        legendManagerPanel.setLayout(new java.awt.GridBagLayout());

        legendPropertiesPanel.setMinimumSize(new java.awt.Dimension(152, 57));
        legendPropertiesPanel.setPreferredSize(new java.awt.Dimension(152, 57));
        legendPropertiesPanel.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        legendManagerPanel.add(legendPropertiesPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(legendManagerPanel, gridBagConstraints);
        legendManagerPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.legendManagerPanel.AccessibleContext.accessibleName")); // NOI18N
        legendManagerPanel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.legendManagerPanel.AccessibleContext.accessibleDescription")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    public void refreshActiveLegendsComboBox() {
        /*
        LegendManager legendManager = legendController.getLegendManager();
        Item activeLegendItem = legendManager.getActiveLegendItem();
        activeLegendsComboBox.removeAllItems();
        if (activeLegendItem != null) {
            ArrayList<Item> legendItems = legendManager.getLegendItems();
            for (Item item : legendItems) {
                activeLegendsComboBox.addItem(item);
            }

            activeLegendsComboBox.setSelectedItem(activeLegendItem);
        } else {
            activeLegendsComboBox.setSelectedIndex(-1);
        }
        */
    }

    private void addLegendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLegendButtonActionPerformed
        Collection<? extends LegendItemBuilder> availableBuilders = legendController.getAvailablebuilders();
        Object[] availableBuildersArray = availableBuilders.toArray();
        LegendItemBuilder chosenLegend = (LegendItemBuilder) JOptionPane.showInputDialog(this, "Choose the type of Legend:", "Add Legend", JOptionPane.PLAIN_MESSAGE, null, availableBuildersArray, availableBuildersArray[0]);

        if (chosenLegend != null) {
            ArrayList<CustomLegendItemBuilder> chosenLegendCustomBuilders = chosenLegend.getAvailableBuilders();
            CustomLegendItemBuilder chosenLegendCustomBuilder = chosenLegendCustomBuilders.get(0); //for Default
            //if there is more than one custom builder, allow the user to choose between them.
            if (chosenLegendCustomBuilders.size() > 1) {
                Object[] chosenLegendCustomBuildersArray = chosenLegendCustomBuilders.toArray();
                chosenLegendCustomBuilder = (CustomLegendItemBuilder) JOptionPane.showInputDialog(this, "Choose the custom builder:", "Custom Builder", JOptionPane.PLAIN_MESSAGE, null, chosenLegendCustomBuildersArray, chosenLegendCustomBuildersArray[0]);
            }

            if (chosenLegendCustomBuilder != null) {
                Graph graph = null;
                AttributeModel attributeModel = null;

                LegendManager legendManager = legendController.getLegendManager();
                Integer newItemIndex = legendManager.getCurrentIndex();

                if (chosenLegendCustomBuilder.isAvailableToBuild()) {

                    Item item = chosenLegend.createCustomItem(newItemIndex, graph, attributeModel, chosenLegendCustomBuilder);

                    // adding item to legend manager
                    legendController.addItemToLegendManager(item);

                    // update property sheet
                    // this property sheet should be converted to inplace UI. Lets see how that goes.
                    refreshPropertySheet(item);
                } else {
                    JOptionPane.showMessageDialog(this, chosenLegendCustomBuilder.stepsNeededToBuild(), NbBundle.getMessage(LegendManager.class, "LegendItem.stepsNeededToBuildItem"), JOptionPane.INFORMATION_MESSAGE, null);
                }
            }
        }

        //Description: Default
        //Groups: Default, Number of nodes in a partition
        //Image: Default
        //Table: Default, Partition Interaction Table, Top 10 nodes with greatest degree
        //Text: Default
    }//GEN-LAST:event_addLegendButtonActionPerformed

    private void refreshPropertySheet(Item activeLegendItem) {
        PreviewController previewController = Lookup.getDefault().lookup(PreviewController.class);
        PreviewModel previewModel = previewController.getModel();

        // check if previewModel exists
        if (previewModel == null) {
            return;
        }

        legendPropertiesPanel.removeAll();
        String[] columnNames = {"Legends"};
        LegendManager legendManager = legendController.getLegendManager();
        ArrayList<Item> items = legendManager.getLegendItems();
        
        Object[][] rowData = new Object[items.size()][];
        for(int i=0; i<items.size(); i++)
        {
            rowData[i] = new Object[1];
            rowData[i][0] = "Legend " + items.get(i).getData(LegendItem.ITEM_INDEX);
        }
        JTable layerOrder = new JTable(rowData, columnNames);
        legendPropertiesPanel.add(layerOrder, BorderLayout.CENTER);
        
        /*
        if (activeLegendItem != null) {
            PropertySheet propertySheet = new PropertySheet();

            propertySheet.setNodes(new Node[]{new LegendNode(propertySheet, activeLegendItem, previewModel.getProperties())});
            propertySheet.setDescriptionAreaVisible(true);
            legendPropertiesPanel.add(propertySheet, BorderLayout.CENTER);
        }
        */
        legendPropertiesPanel.repaint();
    }

    private void removeLegendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLegendButtonActionPerformed
        /*
        // check wheter an element is active or not
        if (activeLegendsComboBox.getSelectedIndex() == -1) {
            return;
        }

        LegendManager legendManager = legendController.getLegendManager();

        Integer activeLegend = ((Item) activeLegendsComboBox.getSelectedItem()).getData(LegendItem.ITEM_INDEX);
        legendManager.removeItem(activeLegend);
        refreshActiveLegendsComboBox();
        refreshPropertySheet(legendManager.getActiveLegendItem());
        */
    }//GEN-LAST:event_removeLegendButtonActionPerformed

    private void editLegendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLegendButtonActionPerformed
    }//GEN-LAST:event_editLegendButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLegendButton;
    private javax.swing.JButton editLegendButton;
    private javax.swing.JPanel legendManagerPanel;
    private javax.swing.JPanel legendPropertiesPanel;
    private javax.swing.JButton removeLegendButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setup(PreviewModel previewModel) {
    }

    @Override
    public JPanel getPanel() {
        refreshActiveLegendsComboBox();
        return this;
    }

    @Override
    public void unsetup() {
    }

    @Override
    public Icon getIcon() {
        return new ImageIcon();
    }

    @Override
    public String getPanelTitle() {
        return NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.title");
    }

    public class ComboboxToolTipRenderer extends DefaultListCellRenderer {

        private ArrayList<String> tooltips;

        @Override
        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {

            JComponent comp = (JComponent) super.getListCellRendererComponent(list,
                    value, index, isSelected, cellHasFocus);

            if (-1 < index && null != value && null != tooltips) {
                list.setToolTipText(tooltips.get(index));
            }
            return comp;
        }

        public void setTooltips(ArrayList<String> tooltips) {
            this.tooltips = tooltips;
        }
    }
    private ComboboxToolTipRenderer tooltipRenderer;
}
